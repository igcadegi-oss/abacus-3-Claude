// ext/trainer_logic.js - –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞
import { ExampleView } from "./components/ExampleView.js";
import { LeoModal } from "./components/LeoModal.js";
import { generateExample } from "./core/generator.js";
import { startTimer, stopTimer } from "../js/utils/timer.js";
import { playSound } from "../js/utils/sound.js";

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞
 * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {Object} context - { t, state }
 */
export function mountTrainerUI(container, { t, state }) {
  console.log('üéÆ –ú–æ–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π UI —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞...');
  console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', state.settings);
  
  // –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω–æ–π layout
  const layout = document.createElement("div");
  layout.className = "mws-trainer";
  layout.innerHTML = `
    <div id="area-example" class="example-view"></div>
    
    <div id="panel-controls">
      <div class="panel-card">
        <div id="timer" style="font-size: 24px; font-weight: bold; color: #7d733a; text-align: center;">00:00</div>
      </div>
      
      <div class="panel-card">
        <div class="stats">
          <div>‚úÖ <span id="stats-correct">0</span></div>
          <div>‚ùå <span id="stats-incorrect">0</span></div>
          <div>üìù <span id="stats-remaining">${getExampleCount(state.settings)}</span></div>
        </div>
        <div class="progress">
          <div class="progress__bar" id="progress-bar" style="width: 0%;"></div>
        </div>
      </div>
      
      <div class="panel-card">
        <input type="number" id="answer-input" placeholder="–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç" />
        <button class="btn btn--primary" id="btn-submit">–û—Ç–≤–µ—Ç–∏—Ç—å</button>
      </div>
      
      <div class="panel-card">
        <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
          <input type="radio" name="display-mode" value="column" checked>
          <span>–°—Ç–æ–ª–±–∏–∫</span>
        </label>
        <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
          <input type="radio" name="display-mode" value="inline">
          <span>–í —Å—Ç—Ä–æ–∫—É</span>
        </label>
      </div>
    </div>
  `;
  
  container.appendChild(layout);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const exampleView = new ExampleView(document.getElementById('area-example'));
  const leoModal = new LeoModal();
  leoModal.setLanguage(state.language || 'ru');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  const session = {
    currentExample: null,
    stats: {
      correct: 0,
      incorrect: 0,
      total: getExampleCount(state.settings)
    },
    completed: 0
  };
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä
  function showNextExample() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if (session.completed >= session.stats.total) {
      finishSession();
      return;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
    session.currentExample = generateExample(state.settings);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —à–∞–≥–∏
    const displayMode = document.querySelector('input[name="display-mode"]:checked').value;
    exampleView.render(
      session.currentExample.steps,
      displayMode
    );
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    document.getElementById('answer-input').value = '';
    document.getElementById('answer-input').focus();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    startTimer('timer');
    
    console.log('üìù –ü–æ–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:', session.currentExample.answer);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
  function checkAnswer() {
    const input = document.getElementById('answer-input');
    const userAnswer = parseInt(input.value, 10);
    
    if (isNaN(userAnswer)) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ');
      return;
    }
    
    stopTimer();
    
    const isCorrect = userAnswer === session.currentExample.answer;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (isCorrect) {
      session.stats.correct++;
    } else {
      session.stats.incorrect++;
    }
    session.completed++;
    
    updateStats();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º LeoModal
    leoModal.show(isCorrect, () => {
      // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ ‚Üí —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä
      showNextExample();
    });
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
  function updateStats() {
    document.getElementById('stats-correct').textContent = session.stats.correct;
    document.getElementById('stats-incorrect').textContent = session.stats.incorrect;
    document.getElementById('stats-remaining').textContent = session.stats.total - session.completed;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progress = (session.completed / session.stats.total) * 100;
    document.getElementById('progress-bar').style.width = progress + '%';
  }
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  function finishSession() {
    console.log('üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–∏:', session.stats);
    
    // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ Results
    if (window.finishTraining) {
      window.finishTraining({
        correct: session.stats.correct,
        total: session.stats.total
      });
    }
  }
  
  // –°–æ–±—ã—Ç–∏—è
  document.getElementById('btn-submit').addEventListener('click', checkAnswer);
  
  document.getElementById('answer-input').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      checkAnswer();
    }
  });
  
  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  document.querySelectorAll('input[name="display-mode"]').forEach(radio => {
    radio.addEventListener('change', () => {
      if (session.currentExample) {
        const mode = radio.value;
        exampleView.render(session.currentExample.steps, mode);
        console.log(`üìä –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${mode}`);
      }
    });
  });
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä
  showNextExample();
  
  console.log('‚úÖ –¢—Ä–µ–Ω–∞–∂—ë—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * @param {Object} settings
 * @returns {number}
 */
function getExampleCount(settings) {
  return settings.examples.infinite ? 10 : settings.examples.count;
}
